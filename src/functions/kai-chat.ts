import { Configuration, OpenAIApi } from 'openai-edge';
import { NextRequest } from 'next/server';

const openai = new OpenAIApi(
  new Configuration({
    apiKey: process.env.VITE_OPENAI_API_KEY!,
  })
);

export const config = { runtime: 'edge' };

export default async function handler(req: NextRequest) {
  try {
    const { messages } = await req.json();
    const encoder = new TextEncoder();

    // Data atual formatada (ISO e leg√≠vel)
    const hoje = new Date();
    const dataISO = hoje.toISOString().split('T')[0];
    const dataLegivel = hoje.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    });

    const completion = await openai.createChatCompletion({
      model: 'gpt-4o',
      temperature: 0.7,
      stream: true,
      messages: [
        {
          role: 'system',
          content: `
        Voc√™ √© do sexo feminino e se chama KAI e seu papel √© entender o que o usu√°rio deseja estruturar e, ap√≥s coletar o contexto necess√°rio, apresentar uma proposta completa de estrutura de OKRs para o pr√≥ximo ciclo de planejamento.

        üü¶ ITEM ZERO: Sempre utilize a data atual como refer√™ncia temporal para nomes e datas relativas. 
        Hoje √© dia ${dataLegivel}, representado no formato ISO como ${dataISO}. Use essa data como base para nomear ciclos e definir per√≠odos.

        -Exemplos de aplica√ß√£o:
          - Se um ciclo come√ßa em abril de 2025, seu nome correto √© ‚ÄúTrimestre 2 de 2025‚Äù.
          - N√£o use anos anteriores como padr√£o (ex: ‚ÄúTrimestre 1 de 2024‚Äù) a menos que estejam claramente no contexto do usu√°rio.
        - Essa data deve ser usada como base para interpretar, classificar e nomear ciclos ou per√≠odos.

        1. **Um ciclo**(com Nome, Data de in√≠cio, Data de fim e Tema)
        
        2. De 3 a 6 objetivos, sendo obrigatoriamente:
          - Pelo menos 1 estrat√©gico
          - Pelo menos 1 t√°tico
          - Pelo menos 1 operacional
        
        3. De 2 a 4 resultados-chave por objetivo
           3.1. Sempre inclua os campos: texto, tipo, m√©trica
           3.2. A m√©trica deve sempre come√ßar com letra mai√∫scula
        
        4. Um conjunto de v√≠nculos v√°lidos entre os objetivos, com base na hierarquia:
           - Estrat√©gico ‚ûù T√°tico ‚ûù Operacional
           - *Todos os objetivos operacionais DEVEM estar vinculados a um objetivo t√°tico*
           - *Todos os objetivos t√°ticos DEVEM estar vinculados a um objetivo estrat√©gico*
           - Nunca vincule diretamente um objetivo estrat√©gico a um operacional
           - Nenhum objetivo deve ficar sem v√≠nculo
        
        üî∑ GERE O CONTE√öDO SEMPRE EM PORTUGU√äS BRASILEIRO

        5. Se encontrar quantidades de Objetivos e KRs mencionados voc√™ DEVE respeitar:
          - Exemplo 1: 2 Objetivos Estrat√©gicos, 3 T√°ticos e 5 Operacionais
          - Exemplo 2: 2 Objetivos Estrat√©gicos com 2 KRs cada
          - Exemplo 3: 3 Objetivos T√°ticos com 3 KRs cada 

        6. NUNCA CRIE KRs BIN√ÅRIOS ou com caracter√≠sticas de iniciativa ou a√ß√µes (0 ou 1, feito ou n√£o feito). Use sempre m√©tricas cont√≠nuas e progressivas.
        ---
        
        üéØ Objetivos Devem ser:
        
        - Qualitativos: N√£o devem conter n√∫meros, apenas descrever o que se quer alcan√ßar.
        - Inspiradores, aspiracionais e claros
        - Sempre alinhados ao tema estrat√©gico do ciclo
        
        üìà Key Results Devem ser:
        
        - Mensur√°veis e orientados a resultado (n√£o tarefas)
        - Relevantes e desafiadores, por√©m alcan√ß√°veis
        - Para objetivos estrat√©gicos e t√°ticos: 2 a 3 KRs
        - Para objetivos operacionais: 2 a 5 KRs
        
        ---

üìå - A resposta deve ser feita em linguagem natural, com clareza e estrutura de f√°cil leitura, mas contendo todos os elementos necess√°rios para que o frontend consiga gerar a estrutura JSON a partir do texto. 
    - Nunca envie JSON vis√≠vel no chat.
    - Ap√≥s gerar uma proposta pergunte se est√° de acordo com o que ele deseja e SEMPRE ap√≥s a pergunta escreva exatamente 'Basta responder **'sim'** e seguimos com o cadastro do ciclo planejado!' 
    - Se o usu√°rio pedir alguma altera√ß√£o SEMPRE reescreva toda a proposta anterior completa com essa altera√ß√£o solicitada aplicada.
          `.trim()
        },
        ...messages,
      ],
    });

    const stream = completion.body;
    const decoder = new TextDecoder();

    const sseStream = new ReadableStream({
      async start(controller) {
        const reader = stream.getReader();
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = decoder.decode(value);
          const lines = chunk.split('\n').filter(line => line.startsWith('data:'));

          for (const line of lines) {
            const jsonStr = line.replace('data: ', '');
            if (jsonStr === '[DONE]') {
              controller.enqueue(encoder.encode('data: [DONE]\n\n'));
              controller.close();
              return;
            }

            try {
              const parsed = JSON.parse(jsonStr);
              const content = parsed.choices?.[0]?.delta?.content;
              if (content) {
                controller.enqueue(encoder.encode(`data: ${JSON.stringify({ content })}\n\n`));
              }
            } catch (e) {
              console.error('[‚ùå Erro ao parsear streaming da conversa]', e, jsonStr);
            }
          }
        }
      }
    });

    return new Response(sseStream, {
      headers: {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        Connection: 'keep-alive',
      },
    });

  } catch (err) {
    console.error('[‚ùå ERRO INTERNO kai-chat]', err);
    return new Response('Erro interno no processamento da fun√ß√£o Kai.', { status: 500 });
  }
}
